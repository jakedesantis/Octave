function [theta, J] = jakeGradientDescent(X, y, theta_init, alpha = 0.01, maxiter = 10000)X_original = X;X = X.-mean(X);X = X./std(X);theta = theta_init;n = size(theta_init, 1);m = length(y);X = [ones(m, 1), X];J = 0;grad = zeros(size(theta));h = (theta' * X')';%disp(h);J = (1/(2*m))*sum((h-y).^2);fprintf(' J starts as %f\n',J);  for i = [1:maxiter]  h = (theta' * X')';  J = (1/2)*sum((h-y).^2);%  fprintf(' J is now %f\n',J);  grad = ((h-y)'*X)';%  disp(grad);  theta = theta - (alpha/m)*grad;      end  theta = theta';fprintf('Size of grad is %f x %f\n', size(grad, 1), size(grad, 2));fprintf('J is %f\n', J);fprintf('Theta is %f\n', theta);end